
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Для каждого Стр Из Объект.Товары Цикл
		
		ЗаполнитьДополнительныеДанныеСтроки(Стр);
		
	КонецЦикла;
	
	ЗаполнитьДанныеЛояльности(Истина);
	РассчитатьДоступныеКСписаниюБаллы();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	Для каждого Стр Из Объект.Товары Цикл
		
		ЗаполнитьДополнительныеДанныеСтроки(Стр);
		Стр.ЭтоУслуга = ЭтоУслуга(Стр.Товар);
		
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	Для каждого Стр Из Объект.Товары Цикл
		
		ЗаполнитьДополнительныеДанныеСтроки(Стр);
		
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Объект.Покупатель = НовыйОбъект;
		ВидЦен = ПолучитьВидЦенПокупателя(Объект.Покупатель);

		Если Объект.ВидЦен <> ВидЦен Тогда
			Объект.ВидЦен = ВидЦен;
			Если Объект.Товары.Количество() > 0 Тогда
				ПересчитатьЦеныИСуммыТоваров(Истина);
			КонецЕсли;	
		КонецЕсли;

		ТекущийЭлемент = Элементы.Покупатель;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.СписатьБаллы
		И ДотсупноКСписанию < Объект.Товары.Итог("Баллы") Тогда
		
		Сообщить("Не хватает баллов для списания");
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПокупательПриИзменении(Элемент)
	
	ВидЦен = ПолучитьВидЦенПокупателя(Объект.Покупатель);

	Если Объект.ВидЦен <> ВидЦен Тогда
		Объект.ВидЦен = ВидЦен;
		Если Объект.Товары.Количество() > 0 Тогда
			ПересчитатьЦеныИСуммыТоваров(Истина);
		КонецЕсли;	
	КонецЕсли;
	
	ЗаполнитьДанныеЛояльности();
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.Баллы = 0;
		СтрокаТЧ.ПроцентСкидки = 0;
		СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена;

		ПересчитатьСкидкиИБаллы(СтрокаТЧ);
	КонецЦикла;
	
	РассчитатьДоступныеКСписаниюБаллы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	Если Объект.Товары.Количество() > 0 Тогда
		ПересчитатьЦеныИСуммыТоваров(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьДанныеЛояльности();
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.Баллы = 0;
		СтрокаТЧ.ПроцентСкидки = 0;
		СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена;

		ПересчитатьСкидкиИБаллы(СтрокаТЧ);
	КонецЦикла;
	
	РассчитатьДоступныеКСписаниюБаллы();
	
КонецПроцедуры

&НаКлиенте
Процедура СписатьБаллыПриИзменении(Элемент)
	
	Если Не Объект.СписатьБаллы Тогда
		Элементы.ТоварыБаллы.Доступность = Ложь;
	Иначе
		Элементы.ТоварыБаллы.Доступность = Истина;
	КонецЕсли;
	
	Для каждого Стр Из Объект.Товары Цикл
		
		Стр.Баллы = 0;		
        ПересчитатьСкидкиИБаллы(Стр);
		ЗаполнитьДополнительныеДанныеСтроки(Стр);

	КонецЦикла;
	
	РассчитатьДоступныеКСписаниюБаллы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыТоварПриИзменении(Элемент)
	
	Стр = ПолучитьТекущуюСтрокуТовары();
	Стр.ЭтоУслуга = ЭтоУслуга(Стр.Товар);
	Стр.Цена = ПолучитьЦенуТовара(Объект.Дата, Стр.Товар, Объект.ВидЦен);
	Стр.Количество = ?(Стр.ЭтоУслуга ИЛИ Стр.Количество = 0, 1, Стр.Количество);
	Стр.Сумма = Стр.Количество * Стр.Цена;
	
	ПересчитатьСкидкиИБаллы(Стр);
	
	ЗаполнитьДополнительныеДанныеСтроки(Стр);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	Стр = ПолучитьТекущуюСтрокуТовары();
	Стр.Сумма = Стр.Количество * Стр.Цена;
	
	ПересчитатьСкидкиИБаллы(Стр);
	ЗаполнитьДополнительныеДанныеСтроки(Стр);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент) 

	Стр = ПолучитьТекущуюСтрокуТовары();
	Стр.Сумма = Стр.Количество * Стр.Цена;
	
	ПересчитатьСкидкиИБаллы(Стр);
	ЗаполнитьДополнительныеДанныеСтроки(Стр);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	Стр = ПолучитьТекущуюСтрокуТовары();
	ЗаполнитьДополнительныеДанныеСтроки(Стр);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыБаллыПриИзменении(Элемент)

	ПересчитатьСкидкиИБаллы(Элементы.Товары.ТекущиеДанные);
	РассчитатьДоступныеКСписаниюБаллы();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПересчитатьНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Пересчитать();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	Для каждого Стр Из Объект.Товары Цикл
		ЗаполнитьДополнительныеДанныеСтроки(Стр);
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВыполнить()

	ПересчитатьНаСервере();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦенуТовара(Дата, Товар, ВидЦен)
	
	ЦенаТовара = РегистрыСведений.ЦеныТоваров.ПолучитьПоследнее(Дата, Новый Структура("Товар, ВидЦен", Товар, ВидЦен));
	Возврат ЦенаТовара.Цена;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВидЦенПокупателя(Покупатель)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.ВидЦен КАК ВидЦен
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Покупатель";
	
	Запрос.УстановитьПараметр("Покупатель", Покупатель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВидЦен;
	КонецЕсли;

	Возврат Справочники.ВидыЦен.ПустаяСсылка();

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоУслуга(Товар)
	
	Возврат ?(Товар.Вид = Перечисления.ВидыТоваров.Услуга, Истина, Ложь);
	
КонецФункции

&НаСервере
Процедура ПересчитатьЦеныИСуммыТоваров(ПересчитатьДляВсехТоваров)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныТоваровСрезПоследних.Цена КАК Цена,
		|	ЦеныТоваровСрезПоследних.Товар КАК Товар
		|ИЗ
		|	РегистрСведений.ЦеныТоваров.СрезПоследних(
		|			,
		|			ВидЦен = &ВидЦены
		|				И Товар В (&Товары)) КАК ЦеныТоваровСрезПоследних";

	Запрос.УстановитьПараметр("ВидЦены", Объект.ВидЦен);

	Товары = Новый Массив();
	Для каждого Стр Из Объект.Товары Цикл 
		Товары.Добавить(Стр.Товар);
	КонецЦикла;
	Запрос.УстановитьПараметр("Товары", Товары);
	
	ТЗЦены = Запрос.Выполнить().Выгрузить();
	ТЗЦены.Индексы.Добавить("Товар");
	
	Для каждого Стр Из Объект.Товары Цикл 
		Если Стр.Цена = 0 ИЛИ ПересчитатьДляВсехТоваров Тогда
			ЦенаТовара = ТЗЦены.Найти(Стр.Товар, "Товар");
			Если ЦенаТовара <> Неопределено Тогда
				Стр.Цена = ЦенаТовара.Цена;
			Иначе 	
				Стр.Цена = 0;
			КонецЕсли;
		КонецЕсли;	
		Стр.Сумма = Стр.Цена * Стр.Количество;
		Стр.СуммаИзменена = Ложь;
		Стр.ЭтоУслуга = ЭтоУслуга(Стр.Товар);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущуюСтрокуТовары()
	
	Возврат Элементы.Товары.ТекущиеДанные;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДополнительныеДанныеСтроки(Строка)
	
	Строка.СуммаИзменена = Строка.Сумма <> Строка.Количество * Строка.Цена;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеЛояльности(ОткрытиеФормы = Ложь)

	Если ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.Покупатель) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КартыЛояльности.Ссылка КАК КартаЛояльности,
			|	КартыЛояльности.Владелец КАК Владелец,
			|	КартыЛояльности.ПроцентСкидки КАК ПроцентСкидки,
			|	КартыЛояльности.ПроцентНачисляемыхБаллов КАК ПроцентНачисляемыхБаллов
			|ПОМЕСТИТЬ ВТ_Данные
			|ИЗ
			|	Справочник.КартыЛояльности КАК КартыЛояльности
			|ГДЕ
			|	КартыЛояльности.Контрагент = &Покупатель
			|	И КартыЛояльности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКартЛояльности.Действует)
			|	И НЕ КартыЛояльности.ПометкаУдаления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВидыКартЛояльности.Ссылка КАК ВидКартЛояльности,
			|	ВидыКартЛояльности.ПроцентСкидки КАК ПроцентСкидки,
			|	ВидыКартЛояльности.ПроцентНачисляемыхБаллов КАК ПроцентНачисляемыхБаллов,
			|	ВидыКартЛояльности.АвтоматическиСписыватьБаллы КАК АвтоматическиСписыватьБаллы,
			|	ВидыКартЛояльности.ВидБонуснойПрограммы КАК ВидБонуснойПрограммы
			|ИЗ
			|	ВТ_Данные КАК ВТ_Данные
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыКартЛояльности КАК ВидыКартЛояльности
			|		ПО ВТ_Данные.Владелец = ВидыКартЛояльности.Ссылка
			|			И (ВЫБОР
			|				КОГДА ВидыКартЛояльности.ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ВидыКартЛояльности.ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1) <= &ТекущаяДата
			|				ИНАЧЕ ИСТИНА
			|			КОНЕЦ)
			|			И (ВЫБОР
			|				КОГДА ВидыКартЛояльности.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ВидыКартЛояльности.ДатаОкончанияДействия >= &ТекущаяДата
			|				ИНАЧЕ ИСТИНА
			|			КОНЕЦ)
			|			И (ВидыКартЛояльности.Организация = &Организация)
			|			И (ВидыКартЛояльности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВидовКартЛояльности.Действует))";

		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Покупатель", Объект.Покупатель);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		
		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда

			Если Выборка.ВидБонуснойПрограммы = ПредопределенноеЗначение("Перечисление.ВидыБонусныхПрограмм.Накопительная") Тогда
				
				Если Не ОткрытиеФормы Тогда
					Объект.СписатьБаллы = Выборка.АвтоматическиСписыватьБаллы;
				КонецЕсли;
				Элементы.СписатьБаллы.Доступность = Истина;
				
			Иначе
				
				Если Не ОткрытиеФормы Тогда
					Объект.СписатьБаллы = Ложь;
				КонецЕсли;
				Элементы.СписатьБаллы.Доступность = Ложь;
				
			КонецЕсли;
			
			ПроцентСкидки = Выборка.ПроцентСкидки;
			ПроцентНачисляемыхБаллов = Выборка.ПроцентНачисляемыхБаллов;
			ВидБонуснойПрограммы = Выборка.ВидБонуснойПрограммы;
			
			Если Объект.ВидКартЛояльности <> Выборка.ВидКартЛояльности Тогда
			    Объект.ВидКартЛояльности = Выборка.ВидКартЛояльности;
			КонецЕсли;
		
		Иначе
			ОчиститьДанныеДанныеЛояльности();
		КонецЕсли;

	Иначе
		ОчиститьДанныеДанныеЛояльности();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидКартЛояльности) Тогда
		Элементы.НадписьВидКартЛояльности.Заголовок = Строка(Объект.ВидКартЛояльности);
	Иначе	
		Элементы.НадписьВидКартЛояльности.Заголовок = "";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеДанныеЛояльности()

	Элементы.СписатьБаллы.Доступность = Ложь;
	Объект.СписатьБаллы = Ложь;
	ПроцентСкидки = 0;
	ПроцентНачисляемыхБаллов = 0;
	ВидБонуснойПрограммы = Неопределено;
	Объект.ВидКартЛояльности = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСкидкиИБаллы(Строка)

	Если Объект.СписатьБаллы Тогда
		Строка.Сумма = Строка.Сумма - Строка.Баллы;
	ИначеЕсли ПроцентСкидки > 0 Тогда
		Строка.ПроцентСкидки = ПроцентСкидки;
		СуммаСкидки = Строка.Сумма * (Строка.ПроцентСкидки / 100);
		Строка.Сумма = Строка.Сумма - СуммаСкидки;
		Строка.Баллы = СуммаСкидки;
	ИначеЕсли ПроцентНачисляемыхБаллов > 0 Тогда
		Строка.ПроцентСкидки = ПроцентНачисляемыхБаллов;
		Строка.Баллы = Строка.Сумма * (Строка.ПроцентСкидки / 100);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РассчитатьДоступныеКСписаниюБаллы()

	Если Объект.СписатьБаллы
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.Покупатель) Тогда

		ДотсупноКСписанию = РегистрыНакопления.БонусныеБаллы.ПолучитьОстатокБонусныхБаллов(Объект.ВидКартЛояльности, Объект.Покупатель);
		Элементы.НадписьДоступноКСписанию.Заголовок = СтрШаблон("Доступно к списанию баллов: %1", Формат(ДотсупноКСписанию, "ЧЦ=15; ЧДЦ=2; ЧН=-"));
		
	Иначе
		Элементы.НадписьДоступноКСписанию.Заголовок = "";		
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти