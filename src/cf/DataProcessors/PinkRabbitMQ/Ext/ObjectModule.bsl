 Перем Модель;

 #Область ПрограммныйИнтерфейс

Функция ПодключитьКомпоненту() Экспорт
		
	ПрочитанныеДанные = Новый Структура;
	ПрочитанныеДанные.Вставить("ТекстJSON", "");
	ПрочитанныеДанные.Вставить("Ошибка",  Ложь);
	ПрочитанныеДанные.Вставить("СоединениеУстановлено",  Ложь);
	ПрочитанныеДанные.Вставить("ОписаниеОшибки", "");
	ПрочитанныеДанные.Вставить("КолвоПрочитано", 0);
	ПрочитанныеДанные.Вставить("ФайлыСтатусов", Новый Массив);

	СистемнаяИнформация = Новый СистемнаяИнформация;

	ЭтоЛинукс = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
			Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;

	// Подключаем внешнюю компоненту RabbitMQ.
	Попытка
        
		Если ЭтоЛинукс Тогда
			ПодключитьВнешнююКомпоненту("ОбщийМакет.PinkRabbitMQLinux", "BITERP", ТипВнешнейКомпоненты.Native);
		Иначе  
			//УстановитьВнешнююКомпоненту("ОбщийМакет.PinkRabbitMQ");
			ПодключитьВнешнююКомпоненту("ОбщийМакет.PinkRabbitMQ", "BITERP", ТипВнешнейКомпоненты.Native);
		КонецЕсли;

		Модель = Новый("AddIn.BITERP.PinkRabbitMQ");
		//ПрочитанныеДанные.СоединениеУстановлено = Истина;

	Исключение

		Возврат Ложь;

	КонецПопытки;
	
	HostName = "localhost";
	UserName = "guest";
	Password = "guest";
	Port = 5672;
	VirtualHost = "/";
	
	Попытка

		Модель.Connect(HostName, Port, UserName, Password, VirtualHost);

	Исключение

		Возврат Ложь;

	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции  

Процедура ОтправитьСообщение(ПараметрыОбмена) Экспорт
	ПараметрыОбмена.Вставить("ТекстОшибки","");
	Попытка
		ТочкаОбмена    		= ПараметрыОбмена.ТочкаОбмена;
		ИмяОчереди     		= ПараметрыОбмена.ИмяОчереди;
		ТекстСообщения 		= ПараметрыОбмена.ТекстСообщения;
		КлючМаршрутизации	= ПараметрыОбмена.КлючМаршрутизации;
		
		Модель.BasicPublish(
			ТочкаОбмена,
			КлючМаршрутизации,
			ТекстСообщения,
			1,
			Ложь);
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка отправки сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка); 
		ПараметрыОбмена.ТекстОшибки = ТекстСообщения;
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Сообщить("Сообщение успешно отправлено!");  
	
КонецПроцедуры

Процедура ПрочитатьСообщения(ПараметрыОбмена) Экспорт
	
	ИмяОчереди = ПараметрыОбмена.ИмяОчереди;
	Попытка
		//КлиентКомпоненты.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
		Потребитель = Модель.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
		ОтветноеСообщение = "";
		Если Модель.BasicConsumeMessage("", ОтветноеСообщение, 5) Тогда
			Модель.BasicAck();
			ПараметрыОбмена.ОтветноеСообщение = ОтветноеСообщение;
			ТекстСообщения = НСтр("ru='Сообщение успешно прочитано!'"); 
			
		Иначе
			ПараметрыОбмена.ОтветноеСообщение = ОтветноеСообщение;
			ТекстСообщения = НСтр("ru='Очередь пустая!'");
			
		КонецЕсли;
		Сообщить(ТекстСообщения);
		Модель.BasicCancel("");
	Исключение
		ВызватьИсключение Модель.GetLastError();
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ИнициализацияМодуля()	
	
	Модель = Неопределено;

КонецПроцедуры   


Процедура СозданиеТочкиИОчереди(ПараметрыОбмена) Экспорт
	
	Попытка
		ТочкаОбмена = ПараметрыОбмена.ТочкаОбмена;
		ИмяОчереди  = ПараметрыОбмена.ИмяОчереди;
		
		Модель.DeclareExchange(ТочкаОбмена, "topic", Ложь, Истина, Ложь);
		Модель.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
		Модель.BindQueue(ИмяОчереди, ТочкаОбмена, "#" + ИмяОчереди + "#");
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка создания точек и очередей!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Сообщить("Точки и очереди успешно созданы!");
КонецПроцедуры


ИнициализацияМодуля();

#КонецОбласти
